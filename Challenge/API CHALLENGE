
// SPDX-License-Identifier: MIT

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: Challenge/api.sol


pragma solidity ^0.8.24;



contract SwapWithLiquiditySources is Ownable {
    address public feeRecipient;
    uint256 public feeBps;  // Fee in basis points (1% = 100 BPS)
    mapping(address => uint256) public buyTaxesBps; // Buy tax for each token
    mapping(address => uint256) public sellTaxesBps; // Sell tax for each token

    struct LiquiditySource {
        string name;
        uint256 proportionBps; // Proportion in BPS (basis points)
    }

    LiquiditySource[] public liquiditySources;

    event SwapExecuted(
        address indexed user,
        address sellToken,
        address buyToken,
        uint256 sellAmount,
        uint256 buyAmount
    );
    
    event FeeCollected(address indexed feeRecipient, uint256 amount);
    event TaxApplied(address indexed token, uint256 taxAmount);
    event LiquiditySourceUsed(string source, uint256 proportion);

    constructor(address _feeRecipient, uint256 _feeBps) Ownable(msg.sender) {
        feeRecipient = _feeRecipient;
        feeBps = _feeBps;  // Example: 100 = 1% fee
    }

    // Owner functions to set fees and taxes
    function setFeeRecipient(address _feeRecipient) external onlyOwner {
        feeRecipient = _feeRecipient;
    }

    function setFeeBps(uint256 _feeBps) external onlyOwner {
        feeBps = _feeBps;
    }

    function setBuyTax(address token, uint256 buyTaxBps) external onlyOwner {
        buyTaxesBps[token] = buyTaxBps;
    }

    function setSellTax(address token, uint256 sellTaxBps) external onlyOwner {
        sellTaxesBps[token] = sellTaxBps;
    }

    function addLiquiditySource(string memory name, uint256 proportionBps) external onlyOwner {
        liquiditySources.push(LiquiditySource(name, proportionBps));
    }

    function removeLiquiditySource(uint256 index) external onlyOwner {
        require(index < liquiditySources.length, "Invalid index");
        liquiditySources[index] = liquiditySources[liquiditySources.length - 1];
        liquiditySources.pop();
    }

    // Simulate a token swap with taxes and fees applied
    function swap(
        address sellToken, 
        address buyToken, 
        uint256 sellAmount, 
        address to
    ) external {
        require(sellAmount > 0, "Invalid sell amount");

        // Transfer tokens from the user to the contract
        IERC20(sellToken).transferFrom(msg.sender, address(this), sellAmount);

        // Apply sell tax if applicable
        uint256 sellTax = (sellAmount * sellTaxesBps[sellToken]) / 10000;
        if (sellTax > 0) {
            sellAmount -= sellTax;
            IERC20(sellToken).transfer(feeRecipient, sellTax);  // Send tax to fee recipient
            emit TaxApplied(sellToken, sellTax);
        }

        // Apply fee
        uint256 feeAmount = (sellAmount * feeBps) / 10000;
        uint256 amountAfterFee = sellAmount - feeAmount;

        // Send fee to fee recipient
        IERC20(sellToken).transfer(feeRecipient, feeAmount);
        emit FeeCollected(feeRecipient, feeAmount);

        // Simulate liquidity source usage and apply proportions
        uint256 totalProportion = 0;

        for (uint256 i = 0; i < liquiditySources.length; i++) {
            LiquiditySource memory source = liquiditySources[i];
            uint256 proportionAmount = (amountAfterFee * source.proportionBps) / 10000;
            totalProportion += source.proportionBps;

            emit LiquiditySourceUsed(source.name, proportionAmount);
        }

        require(totalProportion == 10000, "Total liquidity proportion must be 100%");

        // Simulate the swap output (this would normally be calculated off-chain based on DEX rates)
        uint256 buyAmount = amountAfterFee;  // Assume 1:1 for simplicity

        // Apply buy tax if applicable
        uint256 buyTax = (buyAmount * buyTaxesBps[buyToken]) / 10000;
        if (buyTax > 0) {
            buyAmount -= buyTax;
            IERC20(buyToken).transfer(feeRecipient, buyTax);  // Send tax to fee recipient
            emit TaxApplied(buyToken, buyTax);
        }

        // Transfer the bought token to the user
        IERC20(buyToken).transfer(to, buyAmount);
        emit SwapExecuted(msg.sender, sellToken, buyToken, sellAmount, buyAmount);
    }

    // Retrieve liquidity sources
    function getLiquiditySources() external view returns (LiquiditySource[] memory) {
        return liquiditySources;
    }
}
